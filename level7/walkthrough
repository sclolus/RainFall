The main begins with 4 mallocs:
var_1ch = malloc(8);
*var_1ch = 1;
*(var_1ch + 4) = malloc(8);
var_18ch = malloc(8);
*var_18ch = 2;
*(var_18ch + 4) = malloc(8);

Then it strcpy(*(var_1ch + 4), argv[1]);
also it strcpy(*(var_18ch + 4), argv[2]);

Since the mallocs are contiguous (with padding to 16 bytes alignment), we can affect the second strcpy with the first one.
*(var_18ch + 4) being dependent on argv[1], we can write our argv[2] anywhere.

At the end of the main we can see the pass is not printed, when it tries to puts a hardcoded address.
0x080485c2      edx = 0x80486e9
0x080485cc      dword [size] = edx                         ; const char *mode
0x080485d0      dword [esp] = eax                          ; const char *filename
0x080485d3      sym.imp.fopen ()                           ;[3] ; file*fopen(const char *filename, const char *mode)
0x080485d8      dword [stream] = eax                       ; FILE *stream
0x080485dc      dword [size] = 0x44                        ; 'D' ; [0x44:4]=-1 ; 68 ; int size
0x080485e4      dword [esp] = obj.c                        ; [0x8049960:4]=0 ; char *s
0x080485eb      sym.imp.fgets ()                           ;[4] ; char *fgets(char *s, int size, FILE *stream)
0x080485f0      dword [esp] = 0x8048703                    ; [0x8048703:4]=0x7e7e ; const char *s
0x080485f7      sym.imp.puts ()                            ;[5] ; int puts(const char *s)

The goal will be to redirect execution after the fgets, which writes the pass on obj.c, to sym.m which prints obj.c

We can overwrite the GOT entry of puts, redirecting to sym.m

To access *(var_18ch + 4) we need to fill the 16 bytes of the var_1ch (8 bytes malloc'd + 8 bytes of padding to alignment) then fill the first four bytes of var_18ch then write our target address 0x08049928 (sym.puts GOT entry).
On the second strcpy, we determine what will be the code executed when puts is called, here sym.m (0x080484f4)
